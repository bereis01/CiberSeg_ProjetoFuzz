<!DOCTYPE html> <html lang="en-US"> <head> <meta charset="UTF-8"> <meta http-equiv="X-UA-Compatible" content="IE=Edge"> <link rel="stylesheet" href="/oss-fuzz/assets/css/just-the-docs-default.css"> <link rel="stylesheet" href="/oss-fuzz/assets/css/just-the-docs-head-nav.css" id="jtd-head-nav-stylesheet"> <style id="jtd-nav-activation"> .site-nav > ul.nav-list:first-child > li > a, .site-nav > ul.nav-list:first-child > li > ul > li:not(:nth-child(2)) > a, .site-nav > ul.nav-list:first-child > li > ul > li > ul > li a { background-image: none; } .site-nav > ul.nav-list:not(:first-child) a, .site-nav li.external a { background-image: none; } .site-nav > ul.nav-list:first-child > li:nth-child(2) > ul > li:nth-child(2) > a { font-weight: 600; text-decoration: none; }.site-nav > ul.nav-list:first-child > li:nth-child(2) > button svg, .site-nav > ul.nav-list:first-child > li:nth-child(2) > ul > li:nth-child(2) > button svg { transform: rotate(-90deg); }.site-nav > ul.nav-list:first-child > li.nav-list-item:nth-child(2) > ul.nav-list, .site-nav > ul.nav-list:first-child > li.nav-list-item:nth-child(2) > ul.nav-list > li.nav-list-item:nth-child(2) > ul.nav-list { display: block; } </style> <script async src="https://www.googletagmanager.com/gtag/js?id=G-LRX1V3S5P"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-LRX1V3S5P'); </script> <script src="/oss-fuzz/assets/js/vendor/lunr.min.js"></script> <script src="/oss-fuzz/assets/js/just-the-docs.js"></script> <meta name="viewport" content="width=device-width, initial-scale=1"> <link rel="icon" href="/oss-fuzz/favicon.ico" type="image/x-icon"> <!-- Begin Jekyll SEO tag v2.8.0 --> <title>Setting up a new project | OSS-Fuzz</title> <meta name="generator" content="Jekyll v3.10.0" /> <meta property="og:title" content="Setting up a new project" /> <meta property="og:locale" content="en_US" /> <meta name="description" content="Documentation for OSS-Fuzz" /> <meta property="og:description" content="Documentation for OSS-Fuzz" /> <link rel="canonical" href="/oss-fuzz/getting-started/new-project-guide/" /> <meta property="og:url" content="/oss-fuzz/getting-started/new-project-guide/" /> <meta property="og:site_name" content="OSS-Fuzz" /> <meta property="og:type" content="website" /> <meta name="twitter:card" content="summary" /> <meta property="twitter:title" content="Setting up a new project" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"WebPage","description":"Documentation for OSS-Fuzz","headline":"Setting up a new project","url":"/oss-fuzz/getting-started/new-project-guide/"}</script> <!-- End Jekyll SEO tag --> </head> <body> <a class="skip-to-main" href="#main-content">Skip to main content</a> <svg xmlns="http://www.w3.org/2000/svg" class="d-none"> <symbol id="svg-link" viewBox="0 0 24 24"> <title>Link</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link"> <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path> </svg> </symbol> <symbol id="svg-menu" viewBox="0 0 24 24"> <title>Menu</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"> <line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line> </svg> </symbol> <symbol id="svg-arrow-right" viewBox="0 0 24 24"> <title>Expand</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"> <polyline points="9 18 15 12 9 6"></polyline> </svg> </symbol> <!-- Feather. MIT License: https://github.com/feathericons/feather/blob/master/LICENSE --> <symbol id="svg-external-link" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"> <title id="svg-external-link-title">(external link)</title> <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line> </symbol> <symbol id="svg-doc" viewBox="0 0 24 24"> <title>Document</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"> <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline> </svg> </symbol> <symbol id="svg-search" viewBox="0 0 24 24"> <title>Search</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"> <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line> </svg> </symbol> <!-- Bootstrap Icons. MIT License: https://github.com/twbs/icons/blob/main/LICENSE.md --> <symbol id="svg-copy" viewBox="0 0 16 16"> <title>Copy</title> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16"> <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/> <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/> </svg> </symbol> <symbol id="svg-copied" viewBox="0 0 16 16"> <title>Copied</title> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check-fill" viewBox="0 0 16 16"> <path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"/> <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm6.854 7.354-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708.708Z"/> </svg> </symbol> </svg> <div class="side-bar"> <div class="site-header" role="banner"> <a href="/oss-fuzz/" class="site-title lh-tight"> OSS-Fuzz </a> <button id="menu-button" class="site-button btn-reset" aria-label="Toggle menu" aria-pressed="false"> <svg viewBox="0 0 24 24" class="icon" aria-hidden="true"><use xlink:href="#svg-menu"></use></svg> </button> </div> <nav aria-label="Main" id="site-nav" class="site-nav"> <ul class="nav-list"><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in OSS-Fuzz category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/" class="nav-list-link">OSS-Fuzz</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/architecture/" class="nav-list-link">Architecture</a></li></ul></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Getting started category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/getting-started/" class="nav-list-link">Getting started</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/getting-started/accepting-new-projects/" class="nav-list-link">Accepting new projects</a></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Setting up a new project category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/getting-started/new-project-guide/" class="nav-list-link">Setting up a new project</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/go-lang/" class="nav-list-link">Integrating a Go project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/swift-lang/" class="nav-list-link">Integrating a Swift project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/rust-lang/" class="nav-list-link">Integrating a Rust project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/python-lang/" class="nav-list-link">Integrating a Python project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/javascript-lang/" class="nav-list-link">Integrating a JavaScript project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/jvm-lang/" class="nav-list-link">Integrating a Java/JVM project</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/new-project-guide/bazel/" class="nav-list-link">Integrating a Bazel project</a></li></ul></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/integration-rewards/" class="nav-list-link">Integration rewards</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/bug-disclosure-guidelines/" class="nav-list-link">Bug disclosure guidelines</a></li><li class="nav-list-item"><a href="/oss-fuzz/getting-started/continuous-integration/" class="nav-list-link">Continuous Integration</a></li></ul></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Advanced topics category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/advanced-topics/" class="nav-list-link">Advanced topics</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/ideal-integration/" class="nav-list-link">Ideal integration</a></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/code-coverage/" class="nav-list-link">Code coverage</a></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/fuzz-introspector/" class="nav-list-link">Fuzz Introspector</a></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/corpora/" class="nav-list-link">Corpora</a></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/debugging/" class="nav-list-link">Debugging</a></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/reproducing/" class="nav-list-link">Reproducing</a></li></ul></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Further reading category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/further-reading/" class="nav-list-link">Further reading</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/further-reading/clusterfuzz/" class="nav-list-link">ClusterFuzz</a></li><li class="nav-list-item"><a href="/oss-fuzz/further-reading/fuzzer-environment/" class="nav-list-link">Fuzzer environment</a></li></ul></li><li class="nav-list-item"><a href="/oss-fuzz/advanced-topics/bug-fixing-guidance" class="nav-list-link">Bug fixing guidance</a></li><li class="nav-list-item"><button class="nav-list-expander btn-reset" aria-label="toggle items in Reference category" aria-pressed="false"> <svg viewBox="0 0 24 24" aria-hidden="true"><use xlink:href="#svg-arrow-right"></use></svg> </button><a href="/oss-fuzz/reference/" class="nav-list-link">Reference</a><ul class="nav-list"><li class="nav-list-item"><a href="/oss-fuzz/reference/glossary/" class="nav-list-link">Glossary</a></li><li class="nav-list-item"><a href="/oss-fuzz/reference/useful-links/" class="nav-list-link">Useful links</a></li></ul></li><li class="nav-list-item"><a href="/oss-fuzz/faq/" class="nav-list-link">FAQ</a></li></ul> </nav> <footer class="site-footer"> This site uses <a href="https://github.com/just-the-docs/just-the-docs">Just the Docs</a>, a documentation theme for Jekyll. </footer> </div> <div class="main" id="top"> <div id="main-header" class="main-header"> <div class="search" role="search"> <div class="search-input-wrap"> <input type="text" id="search-input" class="search-input" tabindex="0" placeholder="Search OSS-Fuzz" aria-label="Search OSS-Fuzz" autocomplete="off"> <label for="search-input" class="search-label"><svg viewBox="0 0 24 24" class="search-icon"><use xlink:href="#svg-search"></use></svg></label> </div> <div id="search-results" class="search-results"></div> </div> <nav aria-label="Auxiliary" class="aux-nav"> <ul class="aux-nav-list"> <li class="aux-nav-list-item"> <a href="https://github.com/google/oss-fuzz" class="site-button" > OSS-Fuzz on GitHub </a> </li> </ul> </nav> </div> <div class="main-content-wrap"> <nav aria-label="Breadcrumb" class="breadcrumb-nav"> <ol class="breadcrumb-nav-list"> <li class="breadcrumb-nav-list-item"><a href="/oss-fuzz/getting-started/">Getting started</a></li> <li class="breadcrumb-nav-list-item"><span>Setting up a new project</span></li> </ol> </nav> <div id="main-content" class="main-content"> <main> <h1 class="no_toc" id="setting-up-a-new-project"> <a href="#setting-up-a-new-project" class="anchor-heading" aria-labelledby="setting-up-a-new-project"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Setting up a new project </h1> <ul id="markdown-toc"> <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li> <li><a href="#creating-the-file-structure" id="markdown-toc-creating-the-file-structure">Creating the file structure</a></li> <li><a href="#projectyaml" id="markdown-toc-projectyaml">project.yaml</a> <ul> <li><a href="#homepage" id="markdown-toc-homepage">homepage</a></li> <li><a href="#language" id="markdown-toc-language">language</a></li> <li><a href="#primary" id="markdown-toc-primary">primary_contact, auto_ccs</a></li> <li><a href="#main_repo" id="markdown-toc-main_repo">main_repo</a></li> <li><a href="#vendor" id="markdown-toc-vendor">vendor_ccs (optional)</a></li> <li><a href="#sanitizers" id="markdown-toc-sanitizers">sanitizers (optional)</a></li> <li><a href="#architectures" id="markdown-toc-architectures">architectures (optional)</a></li> <li><a href="#fuzzing_engines" id="markdown-toc-fuzzing_engines">fuzzing_engines (optional)</a></li> <li><a href="#help_url" id="markdown-toc-help_url">help_url (optional)</a></li> <li><a href="#build_frequency" id="markdown-toc-build_frequency">builds_per_day (optional)</a></li> <li><a href="#file_github_issue" id="markdown-toc-file_github_issue">file_github_issue (optional)</a></li> </ul> </li> <li><a href="#dockerfile" id="markdown-toc-dockerfile">Dockerfile</a></li> <li><a href="#buildsh" id="markdown-toc-buildsh">build.sh</a> <ul> <li><a href="#temporarily-disabling-code-instrumentation-during-builds" id="markdown-toc-temporarily-disabling-code-instrumentation-during-builds">Temporarily disabling code instrumentation during builds</a></li> <li><a href="#buildsh-script-environment" id="markdown-toc-buildsh-script-environment">build.sh script environment</a></li> <li><a href="#Requirements" id="markdown-toc-Requirements">build.sh requirements</a></li> <li><a href="#static-and-dynamic-linking-of-libraries" id="markdown-toc-static-and-dynamic-linking-of-libraries">Static and dynamic linking of libraries</a></li> </ul> </li> <li><a href="#disk-space-restrictions" id="markdown-toc-disk-space-restrictions">Disk space restrictions</a></li> <li><a href="#fuzzer-execution-environment" id="markdown-toc-fuzzer-execution-environment">Fuzzer execution environment</a></li> <li><a href="#testing-locally" id="markdown-toc-testing-locally">Testing locally</a></li> <li><a href="#debugging-problems" id="markdown-toc-debugging-problems">Debugging Problems</a></li> <li><a href="#efficient-fuzzing" id="markdown-toc-efficient-fuzzing">Efficient fuzzing</a> <ul> <li><a href="#seed-corpus" id="markdown-toc-seed-corpus">Seed Corpus</a></li> <li><a href="#dictionaries" id="markdown-toc-dictionaries">Dictionaries</a></li> <li><a href="#input-size" id="markdown-toc-input-size">Input Size</a></li> </ul> </li> <li><a href="#checking-in-to-the-oss-fuzz-repository" id="markdown-toc-checking-in-to-the-oss-fuzz-repository">Checking in to the OSS-Fuzz repository</a> <ul> <li><a href="#copyright-headers" id="markdown-toc-copyright-headers">Copyright headers</a></li> </ul> </li> <li><a href="#reviewing-results" id="markdown-toc-reviewing-results">Reviewing results</a> <ul> <li><a href="#status-badge" id="markdown-toc-status-badge">Status Badge</a></li> </ul> </li> <li><a href="#monitoring-performance-via-fuzz-introspector" id="markdown-toc-monitoring-performance-via-fuzz-introspector">Monitoring performance via Fuzz Introspector</a></li> </ul><hr /> <h2 id="prerequisites"> <a href="#prerequisites" class="anchor-heading" aria-labelledby="prerequisites"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Prerequisites </h2> <p>Before you can start setting up your new project for fuzzing, you must do the following:</p> <ul> <li> <p><a href="/oss-fuzz/advanced-topics/ideal-integration/">Integrate</a> one or more <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> with the project you want to fuzz.</p> <p>For examples, see <a href="https://github.com/google/boringssl/tree/master/fuzz">boringssl</a> or <a href="https://www.sqlite.org/src/artifact/ad79e867fb504338">SQLite</a> (C/C++), <a href="https://github.com/dvyukov/go-fuzz-corpus/tree/86a5af9d6842f80b205a082538ea28f61bbb8ccb">go-fuzz</a> or <a href="https://github.com/google/syzkaller/tree/7c7ded697e6322b0975f061b7e268fe44f585dab/prog/test">syzkaller</a> (Go).</p> </li> <li> <p><a href="https://docs.docker.com/engine/installation">Install Docker</a> (Googlers can visit <a href="https://goto.google.com/installdocker">go/installdocker</a>). <a href="/oss-fuzz/faq/#why-do-you-use-docker">Why Docker?</a></p> <p>If you want to run <code class="language-plaintext highlighter-rouge">docker</code> without <code class="language-plaintext highlighter-rouge">sudo</code>, you can <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/#/create-a-docker-group">create a docker group</a>.</p> <p><strong>Note:</strong> Docker images can consume significant disk space. Run <a href="https://gist.github.com/mikea/d23a839cba68778d94e0302e8a2c200f">docker-cleanup</a> periodically to garbage-collect unused images.</p> </li> <li> <p>(optional) <a href="https://cloud.google.com/storage/docs/gsutil_install">Install gsutil</a> for local code coverage testing. For Google internal (gLinux) machines, please refer <a href="https://cloud.google.com/storage/docs/gsutil_install#deb">here</a> instead.</p> </li> </ul> <h2 id="creating-the-file-structure"> <a href="#creating-the-file-structure" class="anchor-heading" aria-labelledby="creating-the-file-structure"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Creating the file structure </h2> <p>Each OSS-Fuzz project has a subdirectory inside the <a href="https://github.com/google/oss-fuzz/tree/master/projects"><code class="language-plaintext highlighter-rouge">projects/</code></a> directory in the <a href="https://github.com/google/oss-fuzz">OSS-Fuzz repository</a>. For example, the <a href="https://github.com/google/boringssl">boringssl</a> project is located in <a href="https://github.com/google/oss-fuzz/tree/master/projects/boringssl"><code class="language-plaintext highlighter-rouge">projects/boringssl</code></a>.</p> <p>Each project directory also contains the following three configuration files:</p> <ul> <li><a href="#projectyaml">project.yaml</a> - provides metadata about the project.</li> <li><a href="#dockerfile">Dockerfile</a> - defines the container environment with information on dependencies needed to build the project and its <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a>.</li> <li><a href="#buildsh">build.sh</a> - defines the build script that executes inside the Docker container and generates the project build.</li> </ul> <p>You can automatically create a new directory for your project in OSS-Fuzz and generate templated versions of the configuration files by running the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /path/to/oss-fuzz
<span class="nv">$ </span><span class="nb">export </span><span class="nv">PROJECT_NAME</span><span class="o">=</span>&lt;project_name&gt;
<span class="nv">$ </span><span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span>&lt;project_language&gt;
<span class="nv">$ </span>python infra/helper.py generate <span class="nv">$PROJECT_NAME</span> <span class="nt">--language</span><span class="o">=</span><span class="nv">$LANGUAGE</span>
</code></pre></div></div> <p>Once the template configuration files are created, you can modify them to fit your project.</p> <p><strong>Note:</strong> We prefer that you keep and maintain <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> in your own source code repository. If this isn’t possible, you can store them inside the OSS-Fuzz project directory you created.</p> <h2 id="projectyaml"> <a href="#projectyaml" class="anchor-heading" aria-labelledby="projectyaml"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> project.yaml </h2> <p>This configuration file stores project metadata. The following attributes are supported:</p> <ul> <li><a href="#homepage">homepage</a></li> <li><a href="#language">language</a></li> <li><a href="#primary">primary_contact</a></li> <li><a href="#auto_ccs">auto_ccs</a></li> <li><a href="#main_repo">main_repo</a></li> <li><a href="#vendor">vendor_ccs</a> (optional)</li> <li><a href="#sanitizers">sanitizers</a> (optional)</li> <li><a href="#architectures">architectures</a> (optional)</li> <li><a href="#help_url">help_url</a> (optional)</li> <li><a href="#build_frequency">builds_per_day</a> (optional)</li> <li><a href="#file_github_issue">file_github_issue</a> (optional)</li> </ul> <h3 id="homepage"> <a href="#homepage" class="anchor-heading" aria-labelledby="homepage"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> homepage </h3> <p>You project’s homepage.</p> <h3 id="language"> <a href="#language" class="anchor-heading" aria-labelledby="language"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> language </h3> <p>Programming language the project is written in. Values you can specify include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">c</code></li> <li><code class="language-plaintext highlighter-rouge">c++</code></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/go-lang/"><code class="language-plaintext highlighter-rouge">go</code></a></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/rust-lang/"><code class="language-plaintext highlighter-rouge">rust</code></a></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/python-lang/"><code class="language-plaintext highlighter-rouge">python</code></a></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/jvm-lang/"><code class="language-plaintext highlighter-rouge">jvm</code> (Java, Kotlin, Scala and other JVM-based languages)</a></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/swift-lang/"><code class="language-plaintext highlighter-rouge">swift</code></a></li> <li><a href="/oss-fuzz//getting-started/new-project-guide/javascript-lang/"><code class="language-plaintext highlighter-rouge">javascript</code></a></li> </ul> <h3 id="primary"> <a href="#primary" class="anchor-heading" aria-labelledby="primary"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> primary_contact, auto_ccs </h3> <p>The primary contact and list of other contacts to be CCed. Each person listed gets access to ClusterFuzz, including crash reports and fuzzer statistics, and are auto-cced on new bugs filed in the OSS-Fuzz tracker. If you’re a primary or a CC, you’ll need to use a <a href="https://support.google.com/accounts/answer/176347?hl=en">Google account</a> to get full access. (<a href="/oss-fuzz/faq/#why-do-you-require-a-google-account-for-authentication">why?</a>).</p> <h3 id="main_repo"> <a href="#main_repo" class="anchor-heading" aria-labelledby="main_repo"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> main_repo </h3> <p>Path to source code repository hosting the code, e.g. <code class="language-plaintext highlighter-rouge">https://path/to/main/repo.git</code>.</p> <h3 id="vendor"> <a href="#vendor" class="anchor-heading" aria-labelledby="vendor"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> vendor_ccs (optional) </h3> <p>The list of vendor email addresses that are downstream consumers of the project and want access to the bug reports as they are filed.</p> <p>Any changes to this list must follow these rules:</p> <ul> <li>Approved by the project maintainer (e.g. comment on pull request, reply on project mailing list).</li> <li>An organization email address is used.</li> </ul> <h3 id="sanitizers"> <a href="#sanitizers" class="anchor-heading" aria-labelledby="sanitizers"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> sanitizers (optional) </h3> <p>The list of sanitizers to use. Possible values are: <code class="language-plaintext highlighter-rouge">address</code>, <code class="language-plaintext highlighter-rouge">memory</code> and <code class="language-plaintext highlighter-rouge">undefined</code>. If you don’t specify a list, <code class="language-plaintext highlighter-rouge">sanitizers</code> uses a default list of supported sanitizers (currently <a href="https://clang.llvm.org/docs/AddressSanitizer.html">“address”</a> and <a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html">“undefined”</a>).</p> <p><a href="https://clang.llvm.org/docs/MemorySanitizer.html">MemorySanitizer</a> (“memory”) is also supported and recommended, but is not enabled by default due to the likelihood of false positives from un-instrumented system dependencies. If you want to use “memory,” please build all libraries your project needs using MemorySanitizer. This can be done by building them with the compiler flags provided during MemorySanitizer builds. Then, you can opt in by adding “memory” to your list of sanitizers.</p> <p>If your project does not build with a particular sanitizer configuration and you need some time to fix it, you can use <code class="language-plaintext highlighter-rouge">sanitizers</code> to override the defaults temporarily. For example, to disable the UndefinedBehaviourSanitizer build, just specify all supported sanitizers except “undefined”.</p> <p>If you want to test a particular sanitizer to see what crashes it generates without filing them in the issue tracker, you can set an <code class="language-plaintext highlighter-rouge">experimental</code> flag. For example, if you want to test “memory”, set <code class="language-plaintext highlighter-rouge">experimental: True</code> like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sanitizers:
 - address
 - memory:
    experimental: True
 - undefined
</code></pre></div></div> <p>Crashes can be accessed on the <a href="/oss-fuzz/further-reading/clusterfuzz#web-interface">ClusterFuzz homepage</a>.</p> <p><code class="language-plaintext highlighter-rouge">sanitizers</code> example: <a href="https://github.com/google/oss-fuzz/blob/master/projects/boringssl/project.yaml">boringssl</a>.</p> <h3 id="architectures"> <a href="#architectures" class="anchor-heading" aria-labelledby="architectures"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> architectures (optional) </h3> <p>The list of architectures to fuzz on. ClusterFuzz supports fuzzing on x86_64 (aka x64) by default. Some projects can benefit from i386 fuzzing. OSS-Fuzz will build and run AddressSanitizer with libFuzzer on i386 by doing the following:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">architectures</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">x86_64</span>
 <span class="pi">-</span> <span class="s">i386</span>
</code></pre></div></div> <p>By fuzzing on i386 you might find bugs that:</p> <ul> <li>Only occur in architecture-specific source code (e.g. code that contains i386 assembly).</li> <li>Exist in architecture-independent source code and which only affects i386 users.</li> <li>Exist in architecture-independent source code and which affects users on other 32-bit platforms such as AArch32 (aka 32-bit ARM).</li> </ul> <p>Note that some bugs which affect x86_64 may be discovered on i386 and filed as such. On the testcase page of each oss-fuzz issue is a list of other jobs where the crash reproduces, this can let you know if the crash exists on x86_64 as well.</p> <p>Fuzzing on i386 is not enabled by default because many projects won’t build for i386 without some modification to their OSS-Fuzz build process. For example, you will need to link against <code class="language-plaintext highlighter-rouge">$LIB_FUZZING_ENGINE</code> and possibly install i386 dependencies within the x86_64 docker image (<a href="https://github.com/google/oss-fuzz/blob/5b8dcb5d942b3b8bc173b823fb9ddbdca7ec6c99/projects/gdal/build.sh#L18">for example</a>) to get things working.</p> <p>There are <a href="https://github.com/google/oss-fuzz/issues/2746">known bugs</a> in ASAN on i386 that cause ClusterFuzz to report unreproducible crashes for 0 length testcases. There are no plans to fix these bugs so be ready for slightly more false positives if you use i386. These false positives should be somewhat easy to identify since they will manifest as crashes in ASAN rather than your code.</p> <h3 id="fuzzing_engines"> <a href="#fuzzing_engines" class="anchor-heading" aria-labelledby="fuzzing_engines"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> fuzzing_engines (optional) </h3> <p>The list of fuzzing engines to use. By default, <code class="language-plaintext highlighter-rouge">libfuzzer</code>, <code class="language-plaintext highlighter-rouge">afl</code>, <code class="language-plaintext highlighter-rouge">honggfuzz</code>, and <code class="language-plaintext highlighter-rouge">centipede</code> are used. It is recommended to use all of them if possible. <code class="language-plaintext highlighter-rouge">libfuzzer</code> is required by OSS-Fuzz.</p> <h3 id="help_url"> <a href="#help_url" class="anchor-heading" aria-labelledby="help_url"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> help_url (optional) </h3> <p>A link to a custom help URL that appears in bug reports instead of the default <a href="/oss-fuzz/advanced-topics/reproducing/">OSS-Fuzz guide to reproducing crashes</a>. This can be useful if you assign bugs to members of your project unfamiliar with OSS-Fuzz, or if they should follow a different workflow for reproducing and fixing bugs than the standard one outlined in the reproducing guide.</p> <p><code class="language-plaintext highlighter-rouge">help_url</code> example: <a href="https://github.com/google/oss-fuzz/blob/master/projects/skia/project.yaml">skia</a>.</p> <h3 id="build_frequency"> <a href="#build_frequency" class="anchor-heading" aria-labelledby="build_frequency"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> builds_per_day (optional) </h3> <p>The number of times the project should be built per day. OSS-Fuzz allows upto 4 builds per day, and builds once per day by default. Example:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">builds_per_day</span><span class="pi">:</span> <span class="m">2</span>
</code></pre></div></div> <p>Will build the project twice per day.</p> <h3 id="file_github_issue"> <a href="#file_github_issue" class="anchor-heading" aria-labelledby="file_github_issue"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> file_github_issue (optional) </h3> <p>Whether to mirror issues on github instead of having them only in the OSS-Fuzz tracker.</p> <h2 id="dockerfile"> <a href="#dockerfile" class="anchor-heading" aria-labelledby="dockerfile"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Dockerfile </h2> <p>This configuration file defines the Docker image for your project. Your <a href="#buildsh">build.sh</a> script will be executed in inside the container you define. For most projects, the image is simple:</p> <div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> gcr.io/oss-fuzz-base/base-builder       # base image with clang toolchain</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> ... <span class="c"># install required packages to build your project</span>
<span class="k">RUN </span>git clone &lt;git_url&gt; &lt;checkout_dir&gt;       <span class="c"># checkout all sources needed to build your project</span>
<span class="k">WORKDIR</span><span class="s"> &lt;checkout_dir&gt;                       # current directory for the build script</span>
<span class="k">COPY</span><span class="s"> build.sh fuzzer.cc $SRC/                # copy build script and other fuzzer files in src dir</span>
</code></pre></div></div> <p>In the above example, the git clone will check out the source to <code class="language-plaintext highlighter-rouge">$SRC/&lt;checkout_dir&gt;</code>.</p> <p>Depending on your project’s language, you will use a different base image, for instance <code class="language-plaintext highlighter-rouge">FROM gcr.io/oss-fuzz-base/base-builder-go</code> for golang.</p> <p>For an example, see <a href="https://github.com/google/oss-fuzz/tree/master/projects/expat/Dockerfile">expat/Dockerfile</a> or <a href="https://github.com/google/oss-fuzz/blob/master/projects/syzkaller/Dockerfile">syzkaller/Dockerfile</a>.</p> <p>In the case of a project with multiple languages/toolchains needed, you can run installation scripts <code class="language-plaintext highlighter-rouge">install_lang.sh</code> where lang is the language needed. You also need to setup environment variables needed by this toolchain, for example <code class="language-plaintext highlighter-rouge">GOPATH</code> is needed by golang. For an example, see <a href="https://github.com/google/oss-fuzz/blob/master/projects/ecc-diff-fuzzer/Dockerfile">ecc-diff-fuzzer/Dockerfile</a>. where we use <code class="language-plaintext highlighter-rouge">base-builder-rust</code>and install golang</p> <h2 id="buildsh"> <a href="#buildsh" class="anchor-heading" aria-labelledby="buildsh"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> build.sh </h2> <p>This file defines how to build binaries for <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> in your project. The script is executed within the image built from your <a href="#Dockerfile">Dockerfile</a>.</p> <p>In general, this script should do the following:</p> <ul> <li>Build the project using your build system with the correct compiler.</li> <li>Provide compiler flags as <a href="#Requirements">environment variables</a>.</li> <li>Build your <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> and link your project’s build with libFuzzer.</li> </ul> <p>Resulting binaries should be placed in <code class="language-plaintext highlighter-rouge">$OUT</code>.</p> <p>Here’s an example from Expat (<a href="https://github.com/google/oss-fuzz/blob/master/projects/expat/build.sh">source</a>):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash -eu</span>

./buildconf.sh
<span class="c"># configure scripts usually use correct environment variables.</span>
./configure

make clean
make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> all

<span class="nv">$CXX</span> <span class="nv">$CXXFLAGS</span> <span class="nt">-std</span><span class="o">=</span>c++11 <span class="nt">-Ilib</span>/ <span class="se">\</span>
    <span class="nv">$SRC</span>/parse_fuzzer.cc <span class="nt">-o</span> <span class="nv">$OUT</span>/parse_fuzzer <span class="se">\</span>
    <span class="nv">$LIB_FUZZING_ENGINE</span> .libs/libexpat.a

<span class="nb">cp</span> <span class="nv">$SRC</span>/<span class="k">*</span>.dict <span class="nv">$SRC</span>/<span class="k">*</span>.options <span class="nv">$OUT</span>/
</code></pre></div></div> <p>If your project is written in Go, check out the <a href="/oss-fuzz//getting-started/new-project-guide/go-lang/">Integrating a Go project</a> page.</p> <p><strong>Note:</strong></p> <ol> <li>Don’t assume the fuzzing engine is libFuzzer by default, because we generate builds for libFuzzer, AFL++, Honggfuzz, and Centipede fuzzing engine configurations. Instead, link the fuzzing engine using $LIB_FUZZING_ENGINE.</li> <li>Make sure that the binary names for your <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> contain only alphanumeric characters, underscore(_) or dash(-). Otherwise, they won’t run on our infrastructure.</li> <li>Don’t remove source code files. They are needed for code coverage.</li> </ol> <h3 id="temporarily-disabling-code-instrumentation-during-builds"> <a href="#temporarily-disabling-code-instrumentation-during-builds" class="anchor-heading" aria-labelledby="temporarily-disabling-code-instrumentation-during-builds"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Temporarily disabling code instrumentation during builds </h3> <p>In some cases, it’s not necessary to instrument every 3rd party library or tool that supports the build target. Use the following snippet to build tools or libraries without instrumentation:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CFLAGS_SAVE="$CFLAGS"
CXXFLAGS_SAVE="$CXXFLAGS"
unset CFLAGS
unset CXXFLAGS
export AFL_NOOPT=1

#
# build commands here that should not result in instrumented code.
#

export CFLAGS="${CFLAGS_SAVE}"
export CXXFLAGS="${CXXFLAGS_SAVE}"
unset AFL_NOOPT
</code></pre></div></div> <h3 id="buildsh-script-environment"> <a href="#buildsh-script-environment" class="anchor-heading" aria-labelledby="buildsh-script-environment"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> build.sh script environment </h3> <p>When your build.sh script is executed, the following locations are available within the image:</p> <div class="table-wrapper"><table> <thead> <tr> <th>Location</th> <th>Env Variable</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">/out/</code></td> <td><code class="language-plaintext highlighter-rouge">$OUT</code></td> <td>Directory to store build artifacts (fuzz targets, dictionaries, options files, seed corpus archives).</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">/src/</code></td> <td><code class="language-plaintext highlighter-rouge">$SRC</code></td> <td>Directory to checkout source files.</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">/work/</code></td> <td><code class="language-plaintext highlighter-rouge">$WORK</code></td> <td>Directory to store intermediate files.</td> </tr> </tbody> </table></div> <p>Although the files layout is fixed within a container, environment variables are provided so you can write retargetable scripts.</p> <p>In case your fuzz target uses the <a href="https://github.com/google/fuzzing/blob/master/docs/split-inputs.md#fuzzed-data-provider">FuzzedDataProvider</a> class, make sure it is included via <code class="language-plaintext highlighter-rouge">#include &lt;fuzzer/FuzzedDataProvider.h&gt;</code> directive.</p> <h3 id="Requirements"> <a href="#Requirements" class="anchor-heading" aria-labelledby="Requirements"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> build.sh requirements </h3> <p>Only binaries without an extension are accepted as targets. Extensions are reserved for other artifacts, like .dict.</p> <p>You <em>must</em> use the special compiler flags needed to build your project and fuzz targets. These flags are provided in the following environment variables:</p> <div class="table-wrapper"><table> <thead> <tr> <th>Env Variable</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">$CC</code>, <code class="language-plaintext highlighter-rouge">$CXX</code>, <code class="language-plaintext highlighter-rouge">$CCC</code></td> <td>The C and C++ compiler binaries.</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">$CFLAGS</code>, <code class="language-plaintext highlighter-rouge">$CXXFLAGS</code></td> <td>C and C++ compiler flags.</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">$LIB_FUZZING_ENGINE</code></td> <td>C++ compiler argument to link fuzz target against the prebuilt engine library (e.g. libFuzzer).</td> </tr> </tbody> </table></div> <p>You <em>must</em> use <code class="language-plaintext highlighter-rouge">$CXX</code> as a linker, even if your project is written in pure C.</p> <p>Most well-crafted build scripts will automatically use these variables. If not, pass them manually to the build tool.</p> <p>See the <a href="https://github.com/google/oss-fuzz/blob/master/infra/base-images/base-builder/README.md#provided-environment-variables">Provided Environment Variables</a> section in <code class="language-plaintext highlighter-rouge">base-builder</code> image documentation for more details.</p> <h3 id="static-and-dynamic-linking-of-libraries"> <a href="#static-and-dynamic-linking-of-libraries" class="anchor-heading" aria-labelledby="static-and-dynamic-linking-of-libraries"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Static and dynamic linking of libraries </h3> <p>The <code class="language-plaintext highlighter-rouge">build.sh</code> should produce fuzzers that are statically linked. This is because the fuzzer build environment is different to the fuzzer runtime environment and if your project depends on third party libraries then it is likely they will not be present in the execution environment. Thus, any shared libraries you may install or compile in <code class="language-plaintext highlighter-rouge">build.sh</code> or <code class="language-plaintext highlighter-rouge">Dockerfile</code> will not be present in the fuzzer runtime environment. There are exceptions to this rule, and for further information on this please see the <a href="/oss-fuzz/further-reading/fuzzer-environment/">fuzzer environment</a> page.</p> <h2 id="disk-space-restrictions"> <a href="#disk-space-restrictions" class="anchor-heading" aria-labelledby="disk-space-restrictions"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Disk space restrictions </h2> <p>Our builders have a disk size of 250GB (this includes space taken up by the OS). Builds must keep peak disk usage below this.</p> <p>In addition, please keep the size of the build (everything copied to <code class="language-plaintext highlighter-rouge">$OUT</code>) small (&lt;10GB uncompressed). The build is repeatedly transferred and unzipped during fuzzing and runs on VMs with limited disk space.</p> <h2 id="fuzzer-execution-environment"> <a href="#fuzzer-execution-environment" class="anchor-heading" aria-labelledby="fuzzer-execution-environment"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Fuzzer execution environment </h2> <p>For more on the environment that your <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> run in, and the assumptions you can make, see the <a href="/oss-fuzz/further-reading/fuzzer-environment/">fuzzer environment</a> page.</p> <h2 id="testing-locally"> <a href="#testing-locally" class="anchor-heading" aria-labelledby="testing-locally"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Testing locally </h2> <p>You can build your docker image and fuzz targets locally, so you can test them before you push them to the OSS-Fuzz repository.</p> <ol> <li> <p>Run the same helper script you used to create your directory structure, this time using it to build your docker image and <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">cd</span> /path/to/oss-fuzz
 <span class="nv">$ </span>python infra/helper.py build_image <span class="nv">$PROJECT_NAME</span>
 <span class="nv">$ </span>python infra/helper.py build_fuzzers <span class="nt">--sanitizer</span> &lt;address/memory/undefined&gt; <span class="nv">$PROJECT_NAME</span>
</code></pre></div> </div> <p>The built binaries appear in the <code class="language-plaintext highlighter-rouge">/path/to/oss-fuzz/build/out/$PROJECT_NAME</code> directory on your machine (and <code class="language-plaintext highlighter-rouge">$OUT</code> in the container).</p> <p><strong>Note:</strong> You <em>must</em> run your fuzz target binaries inside the base-runner docker container to make sure that they work properly.</p> </li> <li> <p>Find failures to fix by running the <code class="language-plaintext highlighter-rouge">check_build</code> command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>python infra/helper.py check_build <span class="nv">$PROJECT_NAME</span>
</code></pre></div> </div> </li> <li> <p>If you want to test changes against a particular fuzz target, run the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>python infra/helper.py run_fuzzer <span class="nt">--corpus-dir</span><span class="o">=</span>&lt;path-to-temp-corpus-dir&gt; <span class="nv">$PROJECT_NAME</span> &lt;fuzz_target&gt;
</code></pre></div> </div> </li> <li> <p>We recommend taking a look at your code coverage as a test to ensure that your fuzz targets get to the code you expect. This would use the corpus generated from the previous <code class="language-plaintext highlighter-rouge">run_fuzzer</code> step in your local corpus directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>python infra/helper.py build_fuzzers <span class="nt">--sanitizer</span> coverage <span class="nv">$PROJECT_NAME</span>
 <span class="nv">$ </span>python infra/helper.py coverage <span class="nv">$PROJECT_NAME</span> <span class="nt">--fuzz-target</span><span class="o">=</span>&lt;fuzz_target&gt; <span class="nt">--corpus-dir</span><span class="o">=</span>&lt;path-to-temp-corpus-dir&gt;
</code></pre></div> </div> </li> </ol> <p>You may need to run <code class="language-plaintext highlighter-rouge">python infra/helper.py pull_images</code> to use the latest coverage tools. Please refer to <a href="/oss-fuzz/advanced-topics/code-coverage/">code coverage</a> for detailed information on code coverage generation.</p> <p><strong>Note:</strong> Currently, we only support AddressSanitizer (address) and UndefinedBehaviorSanitizer (undefined) configurations by default. MemorySanitizer is recommended, but needs to be enabled manually since you must build all runtime dependencies with MemorySanitizer. <b>Make sure to test each of the supported build configurations with the above commands (build_fuzzers -&gt; run_fuzzer -&gt; coverage).</b></p> <p>If everything works locally, it should also work on our automated builders and ClusterFuzz. If you check in your files and experience failures, review your <a href="/oss-fuzz/further-reading/fuzzer-environment/#dependencies">dependencies</a>.</p> <h2 id="debugging-problems"> <a href="#debugging-problems" class="anchor-heading" aria-labelledby="debugging-problems"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Debugging Problems </h2> <p>If you run into problems, our <a href="/oss-fuzz/advanced-topics/debugging/">Debugging page</a> lists ways to debug your build scripts and <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a>.</p> <h2 id="efficient-fuzzing"> <a href="#efficient-fuzzing" class="anchor-heading" aria-labelledby="efficient-fuzzing"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Efficient fuzzing </h2> <p>To improve your fuzz target ability to find bugs faster, you should consider the following ways:</p> <h3 id="seed-corpus"> <a href="#seed-corpus" class="anchor-heading" aria-labelledby="seed-corpus"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Seed Corpus </h3> <p>Most fuzzing engines use evolutionary fuzzing algorithms. Supplying a seed corpus consisting of good sample inputs is one of the best ways to improve <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz target</a>’s coverage.</p> <p>To provide a corpus for <code class="language-plaintext highlighter-rouge">my_fuzzer</code>, put <code class="language-plaintext highlighter-rouge">my_fuzzer_seed_corpus.zip</code> file next to the <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz target</a>’s binary in <code class="language-plaintext highlighter-rouge">$OUT</code> during the build. Individual files in this archive will be used as starting inputs for mutations. You can store the corpus next to source files, generate during build or fetch it using curl or any other tool of your choice. (example: <a href="https://github.com/google/oss-fuzz/blob/master/projects/boringssl/build.sh#L41">boringssl</a>).</p> <p>Seed corpus files will be used for cross-mutations and portions of them might appear in bug reports or be used for further security research. It is important that corpus has an appropriate and consistent license.</p> <p>OSS-Fuzz only: See also <a href="/oss-fuzz/advanced-topics/corpora/">Accessing Corpora</a> for information about getting access to the corpus we are currently using for your fuzz targets.</p> <h3 id="dictionaries"> <a href="#dictionaries" class="anchor-heading" aria-labelledby="dictionaries"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Dictionaries </h3> <p>Dictionaries hugely improve fuzzing efficiency for inputs with lots of similar sequences of bytes. <a href="https://llvm.org/docs/LibFuzzer.html#dictionaries">libFuzzer documentation</a></p> <p>Put your dict file in <code class="language-plaintext highlighter-rouge">$OUT</code>. If the dict filename is the same as your target binary name (i.e. <code class="language-plaintext highlighter-rouge">%fuzz_target%.dict</code>), it will be automatically used. If the name is different (e.g. because it is shared by several targets), specify this in .options file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[libfuzzer]
dict = dictionary_name.dict
</code></pre></div></div> <p>It is common for several <a href="/oss-fuzz/reference/glossary/#fuzz-target">fuzz targets</a> to reuse the same dictionary if they are fuzzing very similar inputs. (example: <a href="https://github.com/google/oss-fuzz/blob/ad88a2e5295d91251d15f8a612758cd9e5ad92db/projects/expat/parse_fuzzer.options">expat</a>).</p> <h3 id="input-size"> <a href="#input-size" class="anchor-heading" aria-labelledby="input-size"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Input Size </h3> <p>By default, the fuzzing engine will generate input of any arbitrary length. This might be useful to try corner cases that could lead to a security vulnerability. However, if large inputs are not necessary to increase the coverage of your target API, it is important to add a limit here to significantly improve performance.</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="n">kMinInputLength</span> <span class="o">||</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="n">kMaxInputLength</span><span class="p">)</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div> <h2 id="checking-in-to-the-oss-fuzz-repository"> <a href="#checking-in-to-the-oss-fuzz-repository" class="anchor-heading" aria-labelledby="checking-in-to-the-oss-fuzz-repository"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Checking in to the OSS-Fuzz repository </h2> <p>Once you’ve tested your fuzzing files locally, fork OSS-Fuzz, commit, and push to the fork. Then create a pull request with your change. Follow the <a href="https://guides.github.com/activities/forking/">Forking Project</a> guide if you’re new to contributing via GitHub.</p> <h3 id="copyright-headers"> <a href="#copyright-headers" class="anchor-heading" aria-labelledby="copyright-headers"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Copyright headers </h3> <p>Please include copyright headers for all files checked in to oss-fuzz:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
</code></pre></div></div> <p><strong>Exception:</strong> If you’re porting a fuzz target from Chromium, keep the original Chromium license header.</p> <h2 id="reviewing-results"> <a href="#reviewing-results" class="anchor-heading" aria-labelledby="reviewing-results"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Reviewing results </h2> <p>Once your change is merged, your project and fuzz targets should be automatically built and run on ClusterFuzz after a short while (&lt; 1 day). If you think there’s a problem, you can check your project’s <a href="https://oss-fuzz-build-logs.storage.googleapis.com/index.html">build status</a>.</p> <p>Use the <a href="https://oss-fuzz.com/">ClusterFuzz web interface</a> to review the following:</p> <ul> <li>Crashes generated</li> <li>Code coverage statistics</li> <li>Fuzzer statistics</li> <li>Fuzzer performance analyzer (linked from fuzzer statistics)</li> </ul> <p><strong>Note:</strong> Your Google Account must be listed in <a href="#projectyaml">project.yaml</a> for you to have access to the ClusterFuzz web interface.</p> <h3 id="status-badge"> <a href="#status-badge" class="anchor-heading" aria-labelledby="status-badge"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Status Badge </h3> <p><img src="https://oss-fuzz-build-logs.storage.googleapis.com/badges/curl.svg" alt="Example Badge" /></p> <p>Once your project has started <a href="https://oss-fuzz-build-logs.storage.googleapis.com/index.html">building</a>, we’d love it if you added our badge in your project’s README. This allows you to see bugs found by your OSS-Fuzz integration at a glance. See <a href="https://github.com/google/brotli#introduction">brotli</a>’s README for an example.</p> <p>Adding it is super easy, just follow this template:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">![Fuzzing Status</span><span class="p">](</span><span class="sx">https://oss-fuzz-build-logs.storage.googleapis.com/badges/</span><span class="nt">&lt;project&gt;</span>.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;can=1&amp;q=proj:<span class="nt">&lt;project&gt;</span>)
</code></pre></div></div> <h2 id="monitoring-performance-via-fuzz-introspector"> <a href="#monitoring-performance-via-fuzz-introspector" class="anchor-heading" aria-labelledby="monitoring-performance-via-fuzz-introspector"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Monitoring performance via Fuzz Introspector </h2> <p>As soon as your project is run with ClusterFuzz (&lt; 1 day), you can view the Fuzz Introspector report for your project. <a href="https://github.com/ossf/fuzz-introspector">Fuzz Introspector</a> helps you understand your fuzzers’ performance and identify any potential blockers. It provides individual and aggregated fuzzer reachability and coverage reports. You can monitor each fuzzer’s static reachability potential and compare it against dynamic coverage and identify any potential bottlenecks. Fuzz Introspector can offer suggestions on increasing coverage by adding new fuzz targets or modify existing ones. Fuzz Introspector reports can be viewed from the <a href="https://oss-fuzz.com/">OSS-Fuzz homepage</a> or through this <a href="http://oss-fuzz-introspector.storage.googleapis.com/index.html">index</a>. Fuzz Introspector support C and C++ projects. Support for Java and Python projects is in the progress.</p> <p>You can view the <a href="https://storage.googleapis.com/oss-fuzz-introspector/bzip2/inspector-report/20221017/fuzz_report.html">Fuzz Introspector report for bzip2</a> as an example.</p> <hr> <h2 class="text-delta">Table of contents</h2> <ul> <li> <a href="/oss-fuzz/getting-started/new-project-guide/go-lang/">Integrating a Go project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/swift-lang/">Integrating a Swift project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/rust-lang/">Integrating a Rust project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/python-lang/">Integrating a Python project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/javascript-lang/">Integrating a JavaScript project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/jvm-lang/">Integrating a Java/JVM project</a> </li> <li> <a href="/oss-fuzz/getting-started/new-project-guide/bazel/">Integrating a Bazel project</a> </li> </ul> </main> </div> </div> <div class="search-overlay"></div> </div> </body> </html>
